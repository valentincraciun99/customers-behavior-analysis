// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

package grpcGeneratedCode

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcessDataAsBase64Request struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessDataAsBase64Request) Reset()         { *m = ProcessDataAsBase64Request{} }
func (m *ProcessDataAsBase64Request) String() string { return proto.CompactTextString(m) }
func (*ProcessDataAsBase64Request) ProtoMessage()    {}
func (*ProcessDataAsBase64Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{0}
}

func (m *ProcessDataAsBase64Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessDataAsBase64Request.Unmarshal(m, b)
}
func (m *ProcessDataAsBase64Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessDataAsBase64Request.Marshal(b, m, deterministic)
}
func (m *ProcessDataAsBase64Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessDataAsBase64Request.Merge(m, src)
}
func (m *ProcessDataAsBase64Request) XXX_Size() int {
	return xxx_messageInfo_ProcessDataAsBase64Request.Size(m)
}
func (m *ProcessDataAsBase64Request) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessDataAsBase64Request.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessDataAsBase64Request proto.InternalMessageInfo

func (m *ProcessDataAsBase64Request) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ProcessDataAsBase64Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessDataAsBase64Request) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type DatasetRequest struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasetRequest) Reset()         { *m = DatasetRequest{} }
func (m *DatasetRequest) String() string { return proto.CompactTextString(m) }
func (*DatasetRequest) ProtoMessage()    {}
func (*DatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{1}
}

func (m *DatasetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetRequest.Unmarshal(m, b)
}
func (m *DatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetRequest.Marshal(b, m, deterministic)
}
func (m *DatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetRequest.Merge(m, src)
}
func (m *DatasetRequest) XXX_Size() int {
	return xxx_messageInfo_DatasetRequest.Size(m)
}
func (m *DatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetRequest proto.InternalMessageInfo

func (m *DatasetRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DatasetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatasetRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DatasetResponse struct {
	Transactions         *Transactions `protobuf:"bytes,1,opt,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DatasetResponse) Reset()         { *m = DatasetResponse{} }
func (m *DatasetResponse) String() string { return proto.CompactTextString(m) }
func (*DatasetResponse) ProtoMessage()    {}
func (*DatasetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{2}
}

func (m *DatasetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasetResponse.Unmarshal(m, b)
}
func (m *DatasetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasetResponse.Marshal(b, m, deterministic)
}
func (m *DatasetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetResponse.Merge(m, src)
}
func (m *DatasetResponse) XXX_Size() int {
	return xxx_messageInfo_DatasetResponse.Size(m)
}
func (m *DatasetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetResponse proto.InternalMessageInfo

func (m *DatasetResponse) GetTransactions() *Transactions {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transactions struct {
	DailyIncomePoints     string   `protobuf:"bytes,1,opt,name=dailyIncomePoints,proto3" json:"dailyIncomePoints,omitempty"`
	DailyIncomePrediction string   `protobuf:"bytes,2,opt,name=dailyIncomePrediction,proto3" json:"dailyIncomePrediction,omitempty"`
	DailyIncomeTrend      string   `protobuf:"bytes,3,opt,name=dailyIncomeTrend,proto3" json:"dailyIncomeTrend,omitempty"`
	NumberOfTranzactions  uint64   `protobuf:"varint,4,opt,name=numberOfTranzactions,proto3" json:"numberOfTranzactions,omitempty"`
	TranzactionsAvgPrice  float64  `protobuf:"fixed64,5,opt,name=tranzactionsAvgPrice,proto3" json:"tranzactionsAvgPrice,omitempty"`
	TranzactionsMinPrice  float64  `protobuf:"fixed64,6,opt,name=tranzactionsMinPrice,proto3" json:"tranzactionsMinPrice,omitempty"`
	TranzactionsMaxPrice  float64  `protobuf:"fixed64,7,opt,name=tranzactionsMaxPrice,proto3" json:"tranzactionsMaxPrice,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Transactions) Reset()         { *m = Transactions{} }
func (m *Transactions) String() string { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()    {}
func (*Transactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{3}
}

func (m *Transactions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transactions.Unmarshal(m, b)
}
func (m *Transactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transactions.Marshal(b, m, deterministic)
}
func (m *Transactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transactions.Merge(m, src)
}
func (m *Transactions) XXX_Size() int {
	return xxx_messageInfo_Transactions.Size(m)
}
func (m *Transactions) XXX_DiscardUnknown() {
	xxx_messageInfo_Transactions.DiscardUnknown(m)
}

var xxx_messageInfo_Transactions proto.InternalMessageInfo

func (m *Transactions) GetDailyIncomePoints() string {
	if m != nil {
		return m.DailyIncomePoints
	}
	return ""
}

func (m *Transactions) GetDailyIncomePrediction() string {
	if m != nil {
		return m.DailyIncomePrediction
	}
	return ""
}

func (m *Transactions) GetDailyIncomeTrend() string {
	if m != nil {
		return m.DailyIncomeTrend
	}
	return ""
}

func (m *Transactions) GetNumberOfTranzactions() uint64 {
	if m != nil {
		return m.NumberOfTranzactions
	}
	return 0
}

func (m *Transactions) GetTranzactionsAvgPrice() float64 {
	if m != nil {
		return m.TranzactionsAvgPrice
	}
	return 0
}

func (m *Transactions) GetTranzactionsMinPrice() float64 {
	if m != nil {
		return m.TranzactionsMinPrice
	}
	return 0
}

func (m *Transactions) GetTranzactionsMaxPrice() float64 {
	if m != nil {
		return m.TranzactionsMaxPrice
	}
	return 0
}

type TestRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{4}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *TestRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TestResponse struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ed94b0a22d11796, []int{5}
}

func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *TestResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessDataAsBase64Request)(nil), "ProcessDataAsBase64Request")
	proto.RegisterType((*DatasetRequest)(nil), "DatasetRequest")
	proto.RegisterType((*DatasetResponse)(nil), "DatasetResponse")
	proto.RegisterType((*Transactions)(nil), "Transactions")
	proto.RegisterType((*TestRequest)(nil), "TestRequest")
	proto.RegisterType((*TestResponse)(nil), "TestResponse")
}

func init() { proto.RegisterFile("main.proto", fileDescriptor_7ed94b0a22d11796) }

var fileDescriptor_7ed94b0a22d11796 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0xd4, 0x30,
	0x14, 0x6c, 0xca, 0x76, 0x51, 0x5f, 0xb2, 0xb4, 0x75, 0x01, 0x45, 0xcb, 0x65, 0x95, 0xd3, 0x0a,
	0xaa, 0x48, 0x84, 0x15, 0x12, 0xdc, 0xfa, 0x21, 0xa1, 0x1e, 0x2a, 0xa2, 0xb0, 0x27, 0xc4, 0xc5,
	0x8d, 0x1f, 0xad, 0x25, 0x62, 0x2f, 0xb6, 0xb7, 0x2a, 0xfc, 0x02, 0x7e, 0x2d, 0xbf, 0x01, 0x39,
	0x76, 0xc0, 0xdd, 0x04, 0x21, 0x84, 0xb8, 0xd9, 0x6f, 0x3c, 0xf3, 0xc6, 0x1f, 0x63, 0x80, 0x86,
	0x72, 0x91, 0xaf, 0x94, 0x34, 0x32, 0xfb, 0x00, 0xd3, 0x52, 0xc9, 0x1a, 0xb5, 0x3e, 0xa3, 0x86,
	0x1e, 0xeb, 0x13, 0xaa, 0xf1, 0xe5, 0xa2, 0xc2, 0xcf, 0x6b, 0xd4, 0x86, 0x3c, 0x86, 0xf1, 0x5a,
	0xa3, 0x3a, 0x67, 0x69, 0x34, 0x8b, 0xe6, 0xa3, 0xca, 0xcf, 0x08, 0x81, 0x91, 0xa0, 0x0d, 0xa6,
	0xdb, 0xb3, 0x68, 0xbe, 0x5b, 0xb5, 0x63, 0x5b, 0x63, 0xd4, 0xd0, 0xf4, 0x9e, 0xab, 0xd9, 0x71,
	0x56, 0xc2, 0x03, 0x2b, 0xab, 0xd1, 0xfc, 0xab, 0x62, 0xe2, 0x15, 0xcf, 0x60, 0xef, 0xa7, 0xa2,
	0x5e, 0x49, 0xa1, 0x91, 0x3c, 0x87, 0xc4, 0x28, 0x2a, 0x34, 0xad, 0x0d, 0x97, 0x42, 0xb7, 0xc2,
	0x71, 0x31, 0xc9, 0x97, 0x41, 0xb1, 0xba, 0xb3, 0x24, 0xfb, 0xbe, 0x0d, 0x49, 0x08, 0x93, 0x23,
	0x38, 0x60, 0x94, 0x7f, 0xfa, 0x72, 0x2e, 0x6a, 0xd9, 0x60, 0x29, 0xb9, 0x30, 0x4e, 0x68, 0xb7,
	0xea, 0x03, 0x64, 0x01, 0x8f, 0xc2, 0xa2, 0x42, 0xc6, 0x5b, 0x1d, 0xef, 0x7e, 0x18, 0x24, 0x4f,
	0x61, 0x3f, 0x00, 0x96, 0x0a, 0x05, 0xf3, 0x87, 0xd5, 0xab, 0x93, 0x02, 0x1e, 0x8a, 0x75, 0x73,
	0x89, 0xea, 0xed, 0x47, 0xeb, 0xf3, 0x6b, 0xb7, 0xb7, 0x51, 0x7b, 0x68, 0x83, 0x98, 0xe5, 0x98,
	0x60, 0x7e, 0x7c, 0x73, 0x55, 0x2a, 0x5e, 0x63, 0xba, 0x33, 0x8b, 0xe6, 0x51, 0x35, 0x88, 0x6d,
	0x72, 0x2e, 0xb8, 0x70, 0x9c, 0x71, 0x9f, 0xd3, 0x61, 0x3d, 0x0e, 0xbd, 0x75, 0x9c, 0xfb, 0x03,
	0x1c, 0x8f, 0x65, 0xaf, 0x20, 0x5e, 0xa2, 0x0e, 0x5f, 0x81, 0xdb, 0x42, 0x7b, 0xc6, 0x3b, 0x95,
	0x9f, 0xd9, 0x1b, 0x37, 0x78, 0x6b, 0xba, 0x57, 0x60, 0xc7, 0xd9, 0x6b, 0x48, 0x1c, 0xd5, 0x5f,
	0xf7, 0x5f, 0x70, 0x8b, 0x6b, 0xd7, 0xf6, 0x1d, 0xaa, 0x1b, 0xeb, 0xfc, 0x19, 0x80, 0x41, 0x6d,
	0x2e, 0xd0, 0x5c, 0x4b, 0x46, 0x92, 0x3c, 0xb0, 0x34, 0x9d, 0xe4, 0x61, 0x97, 0x6c, 0x8b, 0x1c,
	0x41, 0xfc, 0x6b, 0x71, 0xf1, 0x87, 0xd5, 0x05, 0x77, 0x2e, 0x7d, 0xa7, 0xe2, 0x7f, 0xb6, 0xfa,
	0x16, 0x41, 0x6c, 0x33, 0xd0, 0xed, 0x6a, 0x01, 0x13, 0x1f, 0x61, 0x6c, 0x43, 0x4c, 0xf6, 0xf2,
	0xbb, 0xa1, 0x9b, 0xee, 0xe7, 0x1b, 0x99, 0xc9, 0xb6, 0xc8, 0x29, 0x1c, 0x0e, 0x04, 0x9f, 0x3c,
	0xc9, 0x7f, 0xff, 0x1d, 0xf4, 0xac, 0x9c, 0x1c, 0xbe, 0x3f, 0xb8, 0x52, 0xab, 0xfa, 0x0d, 0x0a,
	0x54, 0xd4, 0x20, 0x3b, 0x95, 0x0c, 0x2f, 0xc7, 0xed, 0xcf, 0xf2, 0xe2, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x19, 0xc4, 0x8a, 0xca, 0x67, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TestMethod2(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/TestService/testMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestMethod2(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/TestService/testMethod2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	TestMethod(context.Context, *TestRequest) (*TestResponse, error)
	TestMethod2(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (*UnimplementedTestServiceServer) TestMethod(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMethod not implemented")
}
func (*UnimplementedTestServiceServer) TestMethod2(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMethod2 not implemented")
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_TestMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestService/TestMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestMethod(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestMethod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestMethod2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestService/TestMethod2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestMethod2(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "testMethod",
			Handler:    _TestService_TestMethod_Handler,
		},
		{
			MethodName: "testMethod2",
			Handler:    _TestService_TestMethod2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// TestService2Client is the client API for TestService2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestService2Client interface {
	TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TestMethod2(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testService2Client struct {
	cc *grpc.ClientConn
}

func NewTestService2Client(cc *grpc.ClientConn) TestService2Client {
	return &testService2Client{cc}
}

func (c *testService2Client) TestMethod(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/TestService2/testMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService2Client) TestMethod2(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/TestService2/testMethod2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestService2Server is the server API for TestService2 service.
type TestService2Server interface {
	TestMethod(context.Context, *TestRequest) (*TestResponse, error)
	TestMethod2(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedTestService2Server can be embedded to have forward compatible implementations.
type UnimplementedTestService2Server struct {
}

func (*UnimplementedTestService2Server) TestMethod(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMethod not implemented")
}
func (*UnimplementedTestService2Server) TestMethod2(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMethod2 not implemented")
}

func RegisterTestService2Server(s *grpc.Server, srv TestService2Server) {
	s.RegisterService(&_TestService2_serviceDesc, srv)
}

func _TestService2_TestMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestService2Server).TestMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestService2/TestMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestService2Server).TestMethod(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService2_TestMethod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestService2Server).TestMethod2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestService2/TestMethod2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestService2Server).TestMethod2(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TestService2",
	HandlerType: (*TestService2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "testMethod",
			Handler:    _TestService2_TestMethod_Handler,
		},
		{
			MethodName: "testMethod2",
			Handler:    _TestService2_TestMethod2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	ProcessesData(ctx context.Context, in *DatasetRequest, opts ...grpc.CallOption) (*DatasetResponse, error)
	ProcessDataAsBase64(ctx context.Context, in *ProcessDataAsBase64Request, opts ...grpc.CallOption) (*TestResponse, error)
}

type dataServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataServiceClient(cc *grpc.ClientConn) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) ProcessesData(ctx context.Context, in *DatasetRequest, opts ...grpc.CallOption) (*DatasetResponse, error) {
	out := new(DatasetResponse)
	err := c.cc.Invoke(ctx, "/DataService/ProcessesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ProcessDataAsBase64(ctx context.Context, in *ProcessDataAsBase64Request, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/DataService/ProcessDataAsBase64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	ProcessesData(context.Context, *DatasetRequest) (*DatasetResponse, error)
	ProcessDataAsBase64(context.Context, *ProcessDataAsBase64Request) (*TestResponse, error)
}

// UnimplementedDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (*UnimplementedDataServiceServer) ProcessesData(ctx context.Context, req *DatasetRequest) (*DatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessesData not implemented")
}
func (*UnimplementedDataServiceServer) ProcessDataAsBase64(ctx context.Context, req *ProcessDataAsBase64Request) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDataAsBase64 not implemented")
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_ProcessesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ProcessesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/ProcessesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ProcessesData(ctx, req.(*DatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ProcessDataAsBase64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDataAsBase64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ProcessDataAsBase64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/ProcessDataAsBase64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ProcessDataAsBase64(ctx, req.(*ProcessDataAsBase64Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessesData",
			Handler:    _DataService_ProcessesData_Handler,
		},
		{
			MethodName: "ProcessDataAsBase64",
			Handler:    _DataService_ProcessDataAsBase64_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
